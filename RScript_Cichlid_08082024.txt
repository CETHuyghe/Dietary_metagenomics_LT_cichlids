################################################################################
# RScript for metagenomic analysis of cichlid tribes as food sources of cichlids
################################################################################
# Script for dataset with Kraken2-identified reads using the cichlid genome database with a threshold of 0.9
# By C.E.T. Huyghe

# Set working directory
setwd("/scicore/home/salzburg/huyghe0000/sinergia/DNA_gut/Kraken_combined/Kraken_NoHostSP_R/")

################
# Load datasets 
################
# Load metadata
all_metadata <- read.delim(file="../Metadata_DNA_15112023.txt",sep="\t",check.names=FALSE, row.names = 1)

# Read cichlid genome table from combine_kreport.py
matrix <- read.delim(file="../kraken_combined_cichlid_report.txt",sep="\t") # Includes 

# Make rownames NCBI TaxID
rownames(matrix) <- matrix$taxid

# Remove % total reads, combined number of reads (including reads within subtree), combined number of reads (only at this level), taxonomic classification level, name of level
matrix_2 <- as.data.frame(subset(matrix, select = -c(lvl_type,name,X.perc,tot_all,tot_lvl,taxid)))

# Remove majority taxid's
matrix_3 <- matrix_2[rowSums(matrix_2[])>0,]

# Remove of each sample the total nr of reads at tax level, only use the nr of reads at that specific level, otherwise more reads in total
matrix_3 <- as.data.frame(t(matrix_3))
matrix_4 <- dplyr::filter(matrix_3, grepl('_lvl', rownames(matrix_3))) 
rownames(matrix_4) <- sub("_lvl", "", rownames(matrix_4))
matrix_4 <- as.data.frame(t(matrix_4))

# Remove taxIDs without reads at that specific level
matrix_5 <- matrix_4[rowSums(matrix_4[])>0,]

# Replace colnames 
colnames <- read.delim(file="../samples_cichlid.txt",sep="\t" )
matrix_6 <- matrix_5
colnames(matrix_6) <- colnames$SampleID

rm(matrix)
rm(matrix_2)
rm(matrix_3)
rm(matrix_4)
rm(matrix_5)

#################################
# Make Taxonomy table and filter
#################################
# First extract TaxID's
taxaId <- rownames(matrix_6)

# Make table with the whole NCBI taxonomy of the specific TaxID's
library(taxonomizr)
TaxID <- getTaxonomy(taxaId,'../taxonomy_ncbi/accessionTaxa.sql')
Tax_table <- data.frame(TaxID)

# Remove Cichlids not identified lower than family
Tax_table_strict0 <- Tax_table[is.na(Tax_table$genus), ] 
Tax_table_strict <- Tax_table[ ! rownames(Tax_table) %in% rownames(Tax_table_strict0), ]

# Remove spaces in rownames that might cause errors
row.names(matrix_6) <- gsub(' ', '', row.names(matrix_6))
row.names(Tax_table_strict) <- gsub(' ', '', row.names(Tax_table_strict))

# Keep only these rows in abundance table for which we have a taxonomy
matrix_abund_0 <- matrix_6[ rownames(matrix_6) %in% rownames(Tax_table_strict), ]

# Remove the reference samples
refgut <- rownames(all_metadata[all_metadata$TissueID == 'Refgut',])
matrix_abund_0 <- matrix_abund_0[ , ! colnames(matrix_abund_0) %in% refgut]

# Remove hybrid sample
Hybrid <- rownames(all_metadata[all_metadata$SpecimenID == 'TYD7',])
matrix_abund_0 <- matrix_abund_0[ , ! colnames(matrix_abund_0) %in% Hybrid ]

# Remove problematic samples from mitogen tree
rm1 <- rownames(all_metadata[all_metadata$TissueTubeID == 'TXD2',])
rm2 <- rownames(all_metadata[all_metadata$TissueTubeID == 'VIE9',])
rm3 <- rownames(all_metadata[all_metadata$TissueTubeID == 'TZB5',])
matrix_abund_0 <- matrix_abund_0[ , ! colnames(matrix_abund_0) %in% rm1 ]
matrix_abund_0 <- matrix_abund_0[ , ! colnames(matrix_abund_0) %in% rm2 ]
matrix_abund_0 <- matrix_abund_0[ , ! colnames(matrix_abund_0) %in% rm3 ]

# Check total nr of reads per sample
tot_nr_0 <- as.data.frame( colSums(matrix_abund_0))
rownames(tot_nr_0) <- colnames(matrix_abund_0)
tot_nr_0$Sample <- rownames(tot_nr_0)
tot_nr_0$read_count <- tot_nr_0$`colSums(matrix_abund_0)`

# Explore nr reads per sample
summary(tot_nr_0)
plot(density(tot_nr_0$read_count))
hist(tot_nr_0$read_count,breaks=100)
plot(sort(tot_nr_0$read_count))

# Check total nr of reads per OTU
tot_nr_OTU <- as.data.frame(rowSums(matrix_abund_0))
tot_nr_OTU$Sample <- rownames(tot_nr_OTU)
tot_nr_OTU$read_count <- tot_nr_OTU$`rowSums(matrix_abund_0)`

# Explore OTU count
summary(tot_nr_OTU)
plot(density(tot_nr_OTU$read_count))
hist(tot_nr_OTU$read_count,breaks=100)
plot(sort(tot_nr_OTU$read_count))
tail(sort(tot_nr_OTU$read_count), n=1000)

# Remove 4 outlier cichlid taxa: "278786","158781", "2591303", "158760"
Tax_table_strict[  rownames(Tax_table_strict) %in% c("278786","158781", "2591303", "158760"), ]
Tax_table_strict_1 <- Tax_table_strict[ ! rownames(Tax_table_strict) %in% c("278786","158781", "2591303", "158760"), ]

# Remove non-LT cichlids
Tax_table_strict_1 <- Tax_table_strict_1[ ! Tax_table_strict_1$species %in% c("Benitochromis conjunctus","Heterotilapia buettikoferi","Coptodon bakossiorum" , "Apistogramma diplotaenia", "Steatocranus sp. 'ultraslender' AB-2019", "Pelmatolapia mariae","Tilapia sparmanii", "Tilapia brevimanus","Pharyngochromis acuticeps","Astatoreochromis straeleni","Orthochromis mazimeroensis","Orthochromis indermauri","Thoracochromis brauschi","Stomatepia pindu","Pungu maclareni", "Sarotherodon caroli","Sarotherodon steinbachi","Sarotherodon lohbergeri","Oreochromis malagarasi","Orthochromis malagaraziensis","Orthochromis uvinzae","Astatotilapia flaviijosephi","Astatotilapia stappersii","Serranochromis macrocephalus","Sargochromis carlottae","Pelvicachromis taeniatus","Hemichromis elongatus","Etia nguti","Heterochromis multidens","Australoheros scitulus","Amphilophus zaliosus","Etroplus canarensis","Paratilapia polleni","Ptychochromis oligocanthus"), ]

# Add tribes to cichlid taxa
# Load tribe info
all_tribes <- read.delim(file="All_tribes_Cichlids.txt",sep="\t",check.names=FALSE, row.names = 1)

# Add tribe using tribe info
Tax_table_strict_3 <- Tax_table_strict_1
Tax_table_strict_3$tribe <-with(all_tribes, Tribe[match(Tax_table_strict_3$species,rownames(all_tribes))])

# Add manually for more complicated cases, or not as described species
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Neolamprologus')),"tribe"] <- "Lamprologini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Telmatochromis')),"tribe"] <- "Lamprologini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Chalinochromis')),"tribe"] <- "Lamprologini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Lepidiolamprologus')),"tribe"] <- "Lamprologini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Lamprologus')),"tribe"] <- "Lamprologini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Altolamprologus')),"tribe"] <- "Lamprologini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Julidochromis')),"tribe"] <- "Lamprologini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Bathybates')),"tribe"] <- "Bathybatini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Hemibates')),"tribe"] <- "Bathybatini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Benthochromis')),"tribe"] <- "Benthochromini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Xenotilapia')),"tribe"] <- "Ectodini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Ophthalmotilapia')),"tribe"] <- "Ectodini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Callochromis')),"tribe"] <- "Ectodini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Cyathopharynx')),"tribe"] <- "Ectodini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Ectodus')),"tribe"] <- "Ectodini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Petrochromis')),"tribe"] <- "Tropheini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Tropheus')),"tribe"] <- "Tropheini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Pseudosimochromis')),"tribe"] <- "Tropheini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Cyprichromis')),"tribe"] <- "Cyprichromini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Paracyprichromis')),"tribe"] <- "Cyprichromini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Cyphotilapia')),"tribe"] <- "Cyphotilapiini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Limnochromis')),"tribe"] <- "Limnochromini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Oreochromis')),"tribe"] <- "Oreochromini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Haplochromis')),"tribe"] <- "Haplochromini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Sarotherodon')),"tribe"] <- "Oreochromis"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Trematochromis')),"tribe"] <- "Haplochromini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Orthochromis')),"tribe"] <- "Haplochromini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Perissodus')),"tribe"] <- "Perissodini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Spathodus')),"tribe"] <- "Eretmodini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Greenwoodochromis')),"tribe"] <- "Limnochromini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Astatotilapia')),"tribe"] <- "Haplochromini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Plecodus')),"tribe"] <- "Perissodini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Haplotaxodon')),"tribe"] <- "Perissodini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Eretmodus')),"tribe"] <- "Eretmodini"
Tax_table_strict_3[rownames(subset(Tax_table_strict_3, genus=='Coptodon')),"tribe"] <- "Coptodini"

# Remove non-LT genera
Tax_table_strict_3 <- Tax_table_strict_3[ ! Tax_table_strict_3$genus %in% c("Tilapia", "Orthochromis", "Sarotherodon"), ]

# Relocate tribe column after family
library(plyr)
library(dplyr)
Tax_table_strict_2 <- Tax_table_strict_3 %>% relocate(tribe, .after = family)

# Take to abundance
matrix_abund_1 <- matrix_abund_0[ rownames(matrix_abund_0) %in% rownames(Tax_table_strict_2), ]

# Filter samples and taxa
matrix_abund_1 <- matrix_abund_1[rowSums(matrix_abund_1) > 10,]
matrix_abund_2 <- matrix_abund_1[,colSums(matrix_abund_1) >= 20]

# To taxonomy after filtering
Tax_table_strict_2 <- Tax_table_strict_2[ rownames(Tax_table_strict_2) %in% rownames(matrix_abund_2), ]

# Filter metadata
all_metadata_2 <- all_metadata[ rownames(all_metadata) %in% colnames(matrix_abund_2) ,]

##########################
# Make a PhyloSeq object
##########################
library(phyloseq)
library(vegan)

# Specify datasets needed
otu_mat <- matrix_abund_2
tax_mat <- Tax_table_strict_2
samples_df <- all_metadata_2

# Transform otu table to matrix with numeric values
otu_mat <- as.matrix(otu_mat)
class(otu_mat) <- "numeric"

# Transform taxonomy table to matrix
tax_mat <- as.matrix(tax_mat)

# Transform matrices to phyloseq objects
OTU = phyloseq::otu_table(otu_mat, taxa_are_rows = TRUE)
TAX = phyloseq::tax_table(tax_mat)
samples = phyloseq::sample_data(samples_df)

# Make phyloseq object
physeq <- phyloseq::phyloseq(OTU, TAX, samples)
physeq

################################################################################
# At tribe level
################
# Make physeq with identification to tribe level
physeq_tribe_cichl <- tax_glom(physeq, taxrank=rank_names(physeq)[6], NArm=TRUE, bad_empty=c(NA, "", " ", "\t"))

# Remove hits with fewer than 20 reads
df_physeq_tribe_cichl <- as.data.frame(otu_table(physeq_tribe_cichl))
df_physeq_tribe_cichl[(df_physeq_tribe_cichl) < 20 ] <- 0

# Remove taxa with fewer than 20 reads
df_physeq_tribe_cichl <- df_physeq_tribe_cichl[rowSums(df_physeq_tribe_cichl) >= 20,]

# Remove hits with fewer than 0.5 % abundance in sample
df_physeq_tribe_cichl[apply(df_physeq_tribe_cichl,2,function(x){x/sum(x)}) < 0.005 ] <- 0

# Add to phyloseq object
otu_table(physeq_tribe_cichl) <- phyloseq::otu_table(df_physeq_tribe_cichl, taxa_are_rows = TRUE)

# Remove Samples that have less than 100 reads left
physeq_tribe_cichl = prune_samples(sample_sums(physeq_tribe_cichl)>=20, physeq_tribe_cichl)

# Check number of species with cichlid DNA
summary(unique(sample_data(physeq_tribe_cichl)$SpeciesID))

# Check nr reads per sample
summary(colSums(otu_table(physeq_tribe_cichl)))
sd(colSums(otu_table(physeq_tribe_cichl)))

# Merge samples by Specimen
physeq_tribe_cichl_Specimen0 <- physeq_tribe_cichl
physeq_tribe_cichl_Specimen <- merge_samples(physeq_tribe_cichl_Specimen0,"SpecimenID",fun=sum)

# Make dataset for total nr reads
physeq_tribe_cichl_Specimen0_nr <- as.data.frame(t(otu_table(physeq_tribe_cichl_Specimen0)))
physeq_tribe_cichl_Specimen0_nr$rowsum <- rowSums(physeq_tribe_cichl_Specimen0_nr)

# Add to metadata
all_metadata_2$rowsum_tribe_cichl <-with(physeq_tribe_cichl_Specimen0_nr, rowsum[match(rownames(all_metadata_2),rownames(physeq_tribe_cichl_Specimen0_nr))])

###########
# Make FOO
###########
#Take otu table per specimen
tribe_cichl_Specimen = as(otu_table(physeq_tribe_cichl_Specimen), "matrix")

# Make copy where we keep original TaxIDs
tribe_cichl_Specimen0 <- as.data.frame(t(tribe_cichl_Specimen))

# Take FOO per specimen to put back into PhyloSeq object
tribe_cichl_Specimen0[apply(tribe_cichl_Specimen0,2,function(x){x/sum(x)}) >= 0.005] <- 1
tribe_cichl_Specimen0[tribe_cichl_Specimen0 > 1] <- 0
rowSums(tribe_cichl_Specimen0)

# Make Phyloseq object with FOO
physeq_tribe_cichl_FOO_Specimen <- physeq_tribe_cichl_Specimen
otu_table(physeq_tribe_cichl_FOO_Specimen) <- phyloseq::otu_table(tribe_cichl_Specimen0, taxa_are_rows = TRUE)
sample_data(physeq_tribe_cichl_FOO_Specimen)$SpeciesID <- with(all_metadata_2, SpeciesID[match(rownames(sample_data(physeq_tribe_cichl_FOO_Specimen)),all_metadata_2$SpecimenID)])

# Merge specimens per species
physeq_tribe_cichl_FOO_Specimen_spp <- merge_samples(physeq_tribe_cichl_FOO_Specimen, "SpeciesID", fun=sum) 

# Extract otu_table
tribe_cichl_Specimen_spp = as(otu_table(physeq_tribe_cichl_FOO_Specimen_spp), "matrix")

# rename TaxIDs
colnames(tribe_cichl_Specimen_spp) <- with(Tax_table_strict_2, tribe[match(colnames(tribe_cichl_Specimen_spp),rownames(Tax_table_strict_2))])

# Get nr specimens per species to calculate %
physeq_tribe_cichl_FOO_Specimen_sppFreq = as(sample_data(physeq_tribe_cichl_FOO_Specimen), "data.frame")
tribe_cichl_specimen_freq <- table(physeq_tribe_cichl_FOO_Specimen_sppFreq$SpeciesID)

# Calculate FOO%
tribe_cichl_Specimen_spp_FOOPerc <- t(apply(tribe_cichl_Specimen_spp, 2, "/", tribe_cichl_specimen_freq))

# Melt and prepare data for barplot
library(reshape2)
bar_tribe_cichl_sp_FOO <- melt(t(tribe_cichl_Specimen_spp), id.vars = "SpeciesID", variable.name = "tribe_cichl")
bar_tribe_cichl_sp_FOO$value <- as.numeric(bar_tribe_cichl_sp_FOO$value)
bar_tribe_cichl_sp_FOO$Var2 <- factor(bar_tribe_cichl_sp_FOO$Var2)
bar_tribe_cichl_sp_FOO$tribe_cichl <- factor(bar_tribe_cichl_sp_FOO$Var1)
bar_tribe_cichl_sp_FOO$Tribe = with(all_metadata_2, Tribe[match(bar_tribe_cichl_sp_FOO$Var2,all_metadata_2$SpeciesID)])
bar_tribe_cichl_sp_FOO$Tribe <- factor(bar_tribe_cichl_sp_FOO$Tribe)

# Remove tribe of host cichlid
bar_tribe_cichl_sp_FOO$value <- replace(bar_tribe_cichl_sp_FOO$value, which(bar_tribe_cichl_sp_FOO$Var1 == bar_tribe_cichl_sp_FOO$Tribe), NA)
bar_tribe_cichl_sp_FOO$value[bar_tribe_cichl_sp_FOO$value == 0] <- NA
bar_tribe_cichl_sp_FOO$value[bar_tribe_cichl_sp_FOO$Var1 == "Haplochromini" & bar_tribe_cichl_sp_FOO$Tribe == "Tropheini"] <- NA
bar_tribe_cichl_sp_FOO$value[bar_tribe_cichl_sp_FOO$Var1 == "Tropheini" & bar_tribe_cichl_sp_FOO$Tribe == "Haplochromini"] <- NA

# Define tribe plot colors
tribe_colours <- c("Bathybatini"="#242626", "Benthochromini"="#AE262A", "Boulengerochromini"="#59595C", "Cyphotilapiini"="#FDDF13","Cyprichromini"="#F04D29","Ectodini"="#9AB9D9","Eretmodini"="#682E7A","Haplochromini"="darkgreen","Lamprologini"="#C588BB","Limnochromini"="#535CA9", "Perissodini"="orange","Trematocarini"="#959170", "Tropheini"="#86C773","Oreochromini"="grey")

# Make exploratory baplot
library(ggplot2)
ggplot(data=bar_tribe_cichl_sp_FOO,aes(x=tribe_cichl,y=value,fill=tribe_cichl) ) +
  geom_bar(position="dodge",stat = "identity") +
  geom_col(color = "black") +
  ylab("FOO%") +
  facet_grid(.~Var2, scales = "free", switch = "x", space = "free_x") +
  facet_wrap(Tribe~Var2,scales = "free",nrow=10) +
  scale_fill_manual(values=tribe_colours) +
  theme_classic() +
  theme(axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.x=element_blank(),
        axis.title.x=element_blank()) 

# Order cichlid species by tree position
# Load tree
library(ape)
ActualPhylogeny = "/scicore/home/salzburg/huyghe0000/sinergia/DNA_gut/Kraken_combined/b1_with_Oretan.tre"
pruned.tree = ape::read.tree(ActualPhylogeny)

# Filter tree by species in this dataset
spp <- all_metadata_2[order(all_metadata_2$Tribe),]
species <- unique(spp$SpeciesID)
pruned.tree = drop.tip(pruned.tree, pruned.tree$tip.label[-which(pruned.tree$tip.label %in% species)])

# Define order of consumed cichlid tribes
Tribe_order <- c("Oreochromini","Boulengerochromini","Trematocarini","Bathybatini","Cyphotilapiini","Limnochromini","Ectodini","Cyprichromini","Perissodini","Benthochromini","Eretmodini","Tropheini","Haplochromini","Lamprologini")

# Put NA so only dots when there are values
bar_tribe_cichl_sp_FOO[bar_tribe_cichl_sp_FOO == 0] <- NA

# Make bubble plot
ggplot(bar_tribe_cichl_sp_FOO, aes(y=factor(Var1,level=Tribe_order),x=factor(Var2, level =pruned.tree$tip.label),colour=Var1, size=value)) +
  geom_point() +
  scale_colour_manual(values=tribe_colours) + 
  scale_size(range = c(4,10)) +
  scale_x_discrete(limits=rev) +
  scale_y_discrete(limits=rev) +
  theme_minimal() +
  theme(axis.title.x=element_blank(),
        axis.ticks.x=element_blank(),
        axis.title.y=element_blank(),
        axis.label.y=element_blank(),
        axis.ticks.y=element_blank()) + 
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1,color = "black",size=12),
        axis.text.y = element_text( vjust = 0.5, color = "black",size=12),
        legend.text = element_text(size=12),color = "black") 